<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>定点数的基本运算</title>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/default.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js"></script>
    <!-- and it's easy to individually load additional languages -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/languages/go.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.css"
        integrity="sha384-GvrOXuhMATgEsSwCs4smul74iXGOixntILdUW9XmUC6+HX0sLNAK3q71HotJqlAn" crossorigin="anonymous">
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/katex.min.js"
        integrity="sha384-cpW21h6RZv/phavutF+AuVYrr+dA8xD9zs6FwLpaCct6O9ctzYFfFr4dgmgccOTx"
        crossorigin="anonymous"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.8/dist/contrib/auto-render.min.js"
        integrity="sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05" crossorigin="anonymous"
        onload="renderMathInElement(document.body);"></script>
</head>
<body>
	<h1> 定点数的基本运算 </h1>
	<h2> 乘法 </h2>
	<p>
		类似于我们用竖式进行计算。<br>
		<pre>
			<code class="language-c">
				1011
				1010
				-----
				0000
			   1011
			  0000
			 1011
			 --------
		     110110
			</code>
		</pre>
		可以看出是利用乘数的每一位去乘得出部分积，然后当都乘完时最把部分积相加，得出最终的结果。<br>
		但是这样计算机就要存储 n 个部分积，很占用存储空间，所以我们可以把以上的部分积给补上0进行对齐。<br>
		<pre>
			<code class="language-c">
				1011
				1010
				-----
			 0000000
			 0010110
			 0000000
			 1011000
			 --------
		     110110
			</code>
		</pre>
		我们在第一个部分积前补了三个0,第二个补了2个0,最后一个补了1个0,因此我们可以把这看成部分积的右移，再和下面的部分积相加。<br>
		<b> 整体的流程可看为:    </b>
		<pre>
			<code class="language-c">
				0 * 10110000 = 00000000
				然后 1010 右移 101
				0000 右移 00000000
				计数器减1
				1 * 10110000  = 10110000
				与寄存器中值相加， 10110000
				101 在右移
				在进行相加操作直至计数器为0,得出最终结果.
			</code>
		</pre>
	</p>
	<h2> 除法 </h2>
	<p>
		类似人类手算的过程.<br>
		<pre>
			<code class="language-c">
				 4.7
				----
			 21/100
			 	 84
			 	----
			 	 160 (补一个0)
			 	 147
			 	-----
			 	  130 (补一个0)
			 	  .....
			 	  .....
			</code>
		</pre>
		这样可以看出，我们每计算出一维商，其实都是进行了一次减法的运算。<br>
		$$
			被除数 = 除数 * 商 + 余数
		$$
		手算二进制除法：<br>
		<pre>
			<code class="language-c">
				x = 0.10110
				~x = 1.01001
				/( [x]_{补} = 1.01010 /)
				y = 0.10010
				y / x
					  0
					  ----
			  0.10110/ 0.10010
			   		   1.01010
			   		  --------
			   		   1.11100
			</code>
		</pre>
		$$
			ACC = 除数 - ACC
		$$
	</p>
</body>
</html>