<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <title>线性回归</title>
</head>

<body>
    <h1> 线性回归 </h1>
    <h2> 什么是回归？ </h2>
    <p> 回归是一种统计分析方法，用于建立一个变量（称为因变量或响应变量）与其他变量（称为自变量或预测变量）之间的关系模型。它主要用于预测或解释因变量的数值取值。<br>
        回归分析的目标是通过对已知数据进行拟合，找到最佳的函数形式，以便预测或解释因变量的值。回归分析的一个重要应用是预测。通过使用已知的自变量值，可以利用回归模型来预测因变量的值。例如，可以使用房屋的大小、位置和其他特征作为自变量，建立一个回归模型来预测房屋的价格。
    </p>
    <h2> 线性回归 </h2>
    <p> 最常见的回归方法是线性回归，其中假设因变量与自变量之间存在线性关系。在线性回归中，通过拟合一条直线，尽可能准确地表示因变量与自变量之间的关系。</p>
    $$\hat{y} = w\cdot x + b$$
    <p>可以使用上式来表示这种线性关系，当输入 x 时，可以得到一个预测值。</p>
    <p> 也可以看出，不同使用 w, b 组合可以得出不同的预测值。 </p>
    <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Linear_regression.svg/220px-Linear_regression.svg.png"
        width=50%>
    <h3> 成本函数 </h3>
    这样我们就可以使用成本函数来衡量我们取的 w 与 b 的组合。
    $$
    j(w,b)=\frac{1}{2m}\sum_{i=1}^{m}(\hat{y}^{(i)} - y^{(i)} )^{2}
    $$
    <h2> 批量梯度下降 </h2>
    <p> 有前面的成本函数，我们可以先把 b 看作 0，减化这个函数，这样就得到了一个关于 w 的函数，可以绘制出其函数的图像为： </p>
    <img
        src="https://private-user-images.githubusercontent.com/77034643/307522257-43da034c-ab71-4ba4-99e6-67e7138b2b17.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDg3ODAwNjEsIm5iZiI6MTcwODc3OTc2MSwicGF0aCI6Ii83NzAzNDY0My8zMDc1MjIyNTctNDNkYTAzNGMtYWI3MS00YmE0LTk5ZTYtNjdlNzEzOGIyYjE3LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAyMjQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMjI0VDEzMDI0MVomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTE2NzY2YmYxZjAyNWI1M2Q4Yzk2MDRjM2FmNzU4MjE5YWQ3ZWU1OGZkYzhkMTU2ODA4NzhjNTZiMTk1MDMyNjUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.uRftFM19vXSC-MvyjgtO-kwDWMFauLTC5aP4akeoYwI">
    <p> 这样可以看出，当我们的 w 取了一个值时，可以一点一点的沿着函数下降最快的方向找到局部极小值。 </p>
    <p>继续拓展</p>
    <img src = "https://private-user-images.githubusercontent.com/77034643/307523474-a02d49c3-d547-45f1-887d-0665065cff62.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MDg3ODA1MjAsIm5iZiI6MTcwODc4MDIyMCwicGF0aCI6Ii83NzAzNDY0My8zMDc1MjM0NzQtYTAyZDQ5YzMtZDU0Ny00NWYxLTg4N2QtMDY2NTA2NWNmZjYyLnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDAyMjQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwMjI0VDEzMTAyMFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPWQ0YjE1YmI5NmMxMjQ1OWYxYmJmNTk4MDM3OTk1NTIyODM4YzViMDhlMGI1NDRlYTkxYTMwNzE5NmI0MDE4N2EmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.ZdwirMrdDdtP7Q610hZH_h7Ihe_olUxRwHoupORSqIA">
    <p>在引入了 b 的时候，这是就是一个碗形。</p>
    $$
    w = w - \alpha \cdot \frac{\partial}{\partial w}j(w, b)     $$
    $$
    b = b - \alpha\cdot  \frac{\partial}{\partial b}j(w, b) 
    $$
    $$
    \frac{\partial }{\partial w}j(w, b) = \frac{1}{m}\sum_{i = 1}^{m}(f_{w,b}(x^{(i)})-y^{(i)})x^{(i)}   
    $$
    $$
    \frac{\partial }{\partial b}j(w, b) = \frac{1}{m}\sum_{i = 1}^{m}(f_{w, b}(x^{(i)}) -y^{(i)}) 
    $$
    <h2> 其他梯度下降算法 </h2>
        <q>批量梯度下降</q> <br>
        <q>随机梯度下降</q> <br>
        <q>小批量梯度下降</q>
    <h2> 具体实现 C++ </h2>
    <a href="./线性回归_code.html"> 代码实现 </a>
    <h2> 引用 </h2>
    <a href="https://zhuanlan.zhihu.com/p/72929546">[1] 批量梯度下降(BGD)、随机梯度下降(SGD)、小批量梯度下降(MBGD)</a><br>
    <a href="https://zh.wikipedia.org/wiki/%E7%B7%9A%E6%80%A7%E5%9B%9E%E6%AD%B8">[2] 线性回归</a><br>
    <a href="https://zh.wikipedia.org/wiki/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95">[3] 梯度下降算法</a>
</body>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      extensions: ["tex2jax.js"],
      jax: ["input/TeX", "output/HTML-CSS"],
      tex2jax: {
        inlineMath: [ ['$','$'], ["\\(","\\)"] ],
        displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
        processEscapes: true
      },
      "HTML-CSS": { availableFonts: ["TeX"] }
    });
  </script>

</html>